---
const foodList = [
  { name: "Apple", kcal: 102, tags: ["fruit", "vege"] },
  { name: "Steak", kcal: 43, tags: ["meat"] },
  { name: "Cucumber", kcal: 11, tags: ["vegetable", "vege"] },
  { name: "Orange", kcal: 472, tags: ["fruit", "vege"] },
  { name: "Kiwi", kcal: 92, tags: ["fruit", "vege"] },
  { name: "Tomato", kcal: 125, tags: ["vegetable", "vege"] },
  { name: "Tatar", kcal: 11, tags: ["meat"] },
];

const tags = [...new Set(foodList.flatMap((el) => el.tags))];
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Filter Transition</title>
  </head>
  <body>
    <header>
      <nav>
        <h3>Filter Demo</h3>
        <a href="#" class="link">Apples</a>
        <a href="#" class="link">Oranges</a>
        <a href="#" class="link">Milk</a>
        <a href="#" class="link">Log In</a>
      </nav>
    </header>
    <main>
      <div class="container">
        <article class="content">
          <h1>List of food</h1>
          
          <div class="filter-container">
            <a href="#" data-value="" class="filter active">All</a>
            {tags.map((tag) => <a href={`#${tag}`} class="filter" data-value={tag}>{tag}</a>)}
          </div>
          
          <ul class="food-list">
            {
              foodList.map((foodItem, i) => (
                <li class="food-item" style={`view-transition-name: food-item-${i}`}>
                  <h3 class="food-name">{foodItem.name}</h3>
                  <div class="food-details">
                    {foodItem.kcal} kcal
                    {foodItem.tags.map((tag) => (
                      <span>&#x2022;</span>
                      <span class="tag">{tag}</span>
                      ))}
                  </div>
                </li>
              ))
            }
          </ul>
        </article>
        <aside class="ref-links">
          <h3>Discover</h3>
          <div>
            <h4>Lorem ipsum dolor.</h4>
            <div>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ea doloribus cumque?</div>
          </div>
          <div>
            <h4>Eaque cupiditate, eligendi.</h4>
            <div>Numquam voluptates illum cumque. Nostrum facilis laudantium odio consequatur possimus quas.</div>
          </div>
          <div>
            <h4>Accusantium, sequi?</h4>
            <div>Omnis iure voluptas debitis nam veritatis odio dolore qui explicabo nobis! Vel earum alias?</div>
          </div>
          <div>
            <h4>Perferendis commodi nemo.</h4>
            <div>Exercitationem aliquam harum temporibus autem, dolor ad, repudiandae ipsa fuga quo quibusdam.</div>
          </div>
        </aside>
      </div>
    </main>
  </body>
</html>

<script>
  declare global {
  interface Document {
    startViewTransition(callback: () => void): void;
    // Add any additional properties or methods you need
  }
}

  function setInitialFilters() {
    if(window.location.hash) {
      const value = window.location.hash.substring(1);

      document.startViewTransition(() => {
        setActiveFilter(value);
        filterList(value);
      });
    }
  }
  setInitialFilters();

  document.querySelectorAll('.filter').forEach(tagButton => {
    tagButton.addEventListener('click', (evt) => {
      const btn = evt.target as HTMLElement;
      const filterValue = btn.dataset.value || '';

      document.startViewTransition(() => {
        setActiveFilter(filterValue);
        filterList(filterValue);
      })
    })
  })

  function setActiveFilter(value: string) {
    document.querySelectorAll('.filter').forEach(el => {
      const filterValue = (el as HTMLElement).dataset.value || '';

      if(value === filterValue) {
        el.classList.add('active');
      } else {
        el.classList.remove('active');
      }
    })
  }

  function filterList(value: string) {
    document.querySelectorAll('.food-item').forEach(item => {
      const tags = [...item.querySelectorAll('.tag')].map(span => span.innerHTML)

      if (!value || tags.includes(value)) {
        item.removeAttribute('hidden')
      } else {
        item.setAttribute('hidden', '')
      }
    })
  }
</script>

<style>
  :root {
    --bg-color: white;
    --text-color: black;
    --text-color-secondary: rgb(71, 71, 71);

    --content-width: 56rem;
  }

  html {
    background-color: var(--bg-color);

    font-family: Charter, "Bitstream Charter", "Sitka Text", Cambria, serif;
    font-weight: normal;
    font-size: 1em;

    color: var(--text-color);
    box-sizing: border-box;
    line-height: 1.8;
  }

  * {
    margin: 0;
    padding: 0;
  }

  a {
    color: inherit;
    text-decoration: none;
  }

  ul {
    list-style: none;
  }

  body {
    display: flex;
    flex-direction: column;
    gap: 4rem;
  }

  header {
    display: flex;
    justify-content: center;

    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);
  }

  nav {
    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: var(--content-width);
    display: flex;
    gap: 1rem;
    align-items: center;
    padding: 1rem;
  }

  nav > .link:last-child() {
    margin-left: auto;
  }

  main {
    display: flex;
    justify-content: center;
  }

  .container {
    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: var(--content-width);
    margin-inline:2rem;

    display: flex;
  }

  .ref-links {
    border: 1px solid rgb(210, 210, 210);
    border-radius: 6px;
    padding: 2rem 3rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 14rem;
  }

  @media screen and (max-width: 870px) {
    .container {
      flex-direction: column;
      gap: 4rem;
    }

    .ref-links {
      max-width: initial;
    }
  }
  
  .content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .filter-container {
    display: flex;
    gap: 1rem;
  }

  .filter {
    padding: 0.1rem 0.8rem;
    text-transform: capitalize;
    cursor: pointer;
  }

  .filter.active {
    background-color: black;
    color: white;
    border-radius: 6px;
  }

  .food-item {
    padding-block: 0.8rem;
  }

  .food-item > .food-details {
    color: var(--text-color-secondary);
    display: flex;
    gap: 0.4em;
  }

  .food-item > .food-name {
    font-size: 1.4em;
    line-height: 1.4em;
  }

  .food-item .tag {
    display: inline-block;
    text-transform: capitalize;
  }



</style>

<style is:inline>
  ::view-transition-group(root) {
    animation-duration: 500ms;
  }

  ::view-transition-group(*) {
    animation-duration: 500ms;
  }

  ::view-transition-old(root) {

  }

  ::view-transition-new(root) {

  }
</style>